JUDI Task
=========

.. meta::
   :description lang=en: A task in JUDI

A JUDI task is associated with a parameter database and actually represents a collection of DoIt tasks, each corresponding to a row in the parameter database.

A JUDI task is python class inherited from the class ``Task``. It should define the following class variables.

Essential class variables:
  * inputs: A python dictionary for the JUDI files input to the current task.
  * targets: A python dictionary for the JUDI files generated by the current task.
  * actions: A list of DoIt actions.

Optional class variables:
  * mask: A list of parameters that are masked from the global parameter database for the current task.


Parameter substitution in actions
---------------------------------

In additions to the forms of DoIt actions, JUDI provides the following additional form:

* (func, args): Here func could be a string or a callable and args is a list of arguments. When func is a str, it can have placeholders {} which are replaced by the elements of args. When func is a callable it must have only positional arguments provided through args. An element of args can have special strings which are replaced by values as shown in the following table:

+-----------+----------------------------------------------------+
|Value      | Substituted value                                  |
+===========+====================================================+
|'$x'       | List of paths for the instances of JUDI file 'x'   |
|           | applicable to the current JUDI task instance.      |
+-----------+----------------------------------------------------+


Some examples
-------------

The following code snippet creates a global parameter database with two parameters W and X and then creates a file with a parameter database that masks parameter W in the global parameter database.

.. code-block:: python
   :emphasize-lines: 7
   :linenos:

   from judi import add_param, show_param_db, File
   
   add_param("1 2".split(), 'W')
   add_param("a b c".split(), 'X')
   show_param_db()
   
   f = File('test', mask = ['W'])
   show_param_db(f.param)

The contents of the global parameter database and of the parameter database associated with the file are as follows:

.. code-block:: text

   Global param db:
      W  X
   0  1  a
   1  1  b
   2  1  c
   3  2  a
   4  2  b
   5  2  c
   Param db:
      X  name                   path
   0  a  test  ./judi_files/X~a/test
   1  b  test  ./judi_files/X~b/test
   2  c  test  ./judi_files/X~c/test

More to be added ...
